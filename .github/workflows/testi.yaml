name: Python Calculator Tests and Report Publishing

# Käynnistyy push-tapahtumasta (kaikkiin haaroihin oletuksena)
on: [push]

# Määritä GITHUB_TOKENille tarvittavat oikeudet GitHub Pagesiin julkaisua varten
permissions:
  contents: read # Tarvitaan koodin noutamiseen (checkout)
  pages: write # Tarvitaan GitHub Pagesiin kirjoittamiseen
  id-token: write # Tarvitaan OIDC-tunnistautumiseen GitHub Pagesille

jobs:
  # Nimetään jobi uudelleen kuvaamaan testausta ja raportin luontia
  test_and_prepare_report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python 3.x -vaihe voidaan poistaa, jos kaikki riippuvuudet asennetaan Docker-imageen.
      # Poista tämä vaihe, jos requirements.txt sisältää kaikki testaukseen tarvittavat riippuvuudet
      # ja asennat ne Dockerfilessa.
      # - name: Set up Python 3.x
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.x"

      - name: Build the Docker image
        # Muuta build-komentoa: build context on nyt repositorion juuri (.),
        # ja -f lippua käytetään osoittamaan Dockerfileen build_automation-kansiossa.
        run: docker build -t calculator-app -f ./build_automation/Dockerfile .

      - name: Run the Docker container for the application
        # Ajetaan sovelluskontti taustalla (-d)
        run: docker run -d --name calculator calculator-app

      # --- Testien ajo ja tulosten kerääminen ---
      - name: Run Robot Framework tests inside the container
        run: |
          # Aja testit kontin sisällä.
          # Määritellään polku testitiedostoon kontin sisällä (/app/test_automation/test.robot)
          # ja tuloshakemisto (/app/results) kontin sisällä.
          # Robot Frameworkin tulokset (log.html, report.html, output.xml) tallennetaan /app/results-kansioon kontin sisälle
          docker exec calculator robot -d /app/results /app/test_automation/test.robot
        # Jatka työnkulkua, vaikka testit epäonnistuisivat, jotta raportti voidaan silti julkaista
        continue-on-error: true

      - name: Create results directory on runner
        # Luodaan hakemisto runnerin tiedostojärjestelmään tuloksia varten
        run: mkdir -p ./test-results
        # Ajetaan aina, jotta hakemisto on olemassa kopiointia varten
        if: always()

      - name: Copy test results from container
        # Kopioidaan tulokset kontin sisältä runnerille
        # Kopioidaan /app/results-kansiosta kontin sisältä (jossa Robot Framework tallensi ne)
        run: docker cp calculator:/app/results/. ./test-results/
        # Ajetaan aina, jotta tulokset yritetään kopioida, vaikka testit olisivat epäonnistuneet
        if: always()

      - name: Stop and remove the container
        # Siivotaan ajettu kontti
        run: docker stop calculator && docker rm calculator
        # Ajetaan aina siivouksen varmistamiseksi
        if: always()

      # --- GitHub Pages -julkaisun valmistelu ---
      - name: List results files (for debugging)
        # Listaa kopioidut tiedostot, auttaa vianetsinnässä
        run: ls -l ./test-results
        if: always()

      - name: Setup Pages
        # Valmistelee GitHub Pages -julkaisun
        uses: actions/configure-pages@v5
        if: always() # Ajetaan aina, jotta deploy-vaihe toimii

      - name: Upload artifact
        # Lataa testitulokset sisältävän hakemiston artefaktina GitHub Pagesia varten
        uses: actions/upload-pages-artifact@v3
        with:
          # Polku hakemistoon runnerilla
          path: "./test-results"
        if: always() # Ladataan artefakti aina (myös epäonnistuneiden testien raportti)

  # --- Julkaisujobi ---
  deploy:
    needs: test_and_prepare_report

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
